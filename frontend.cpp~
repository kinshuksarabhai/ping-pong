#include<GL/gl.h>
#include<GL/glu.h>
#include<GL/glut.h>

#include<math.h>
#include<iostream>

#include"game.cpp"
using namespace std;

class Display
{
public:
  Game g;
  void display();
  void display_board();
  void display_paddles();
  void display_ball();
};
  Display d;
void display()
{
      d.g.calculateNextState();
      d.g.printState();
      d.display();
      usleep(40000);
}
void Display::display()
{
    glClear (GL_COLOR_BUFFER_BIT);
    display_board();
    display_ball();
    glutSwapBuffers();
    glFlush ();
}
void Display::display_board()
{
   glColor3f (0.0, 0.0, 0.0);
    glBegin(GL_POLYGON);
        glVertex3f (0.0, 0.0, 0.0);
        glVertex3f (1.0, 0.0, 0.0);
        glVertex3f (1.0, 1.0, 0.0);
        glVertex3f (0.0, 1.0, 0.0);
    glEnd();
   glColor3f (0.3, 0.3, 0.3);
    glBegin(GL_POLYGON);
        glVertex3f (PADDLE_WIDTH,PADDLE_WIDTH, 0.0);
        glVertex3f (1-PADDLE_WIDTH,PADDLE_WIDTH, 0.0);
        glVertex3f (1-PADDLE_WIDTH,1-PADDLE_WIDTH, 0.0);
        glVertex3f (PADDLE_WIDTH,1-PADDLE_WIDTH, 0.0);
    glEnd();
}
void Display::display_paddles()
{
   glColor3f (1.0, 1.0, 1.0);
    glBegin(GL_POLYGON);
        glVertex3f (PADDLE_WIDTH,PADDLE_WIDTH, 0.0);
        glVertex3f (1-PADDLE_WIDTH,PADDLE_WIDTH, 0.0);
        glVertex3f (1-PADDLE_WIDTH,1-PADDLE_WIDTH, 0.0);
        glVertex3f (PADDLE_WIDTH,1-PADDLE_WIDTH, 0.0);
    glEnd();
}
void Display::display_ball()
{
//filled circle
float x1,y1,x2,y2;
float angle;
double radius=BALL_SIZE;

//x1 = 0.5,y1=0.6;
x1=g.ball[0].position.x;
y1=g.ball[0].position.y;
glColor3f(1.0,1.0,0.0);

glBegin(GL_TRIANGLE_FAN);
glVertex2f(x1,y1);

for (angle=1.0f;angle<361.0f;angle+=0.2)
{
    x2 = x1+sin(angle)*radius;
    y2 = y1+cos(angle)*radius;
    glVertex2f(x2,y2);
}

glEnd();
}
void init (void) 
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (500, 500); 
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Ping Pong");
    init ();
    glutDisplayFunc(display); 
    glutIdleFunc(display); 
    glutMainLoop();
    return 0;   /* ISO C requires main to return int. */
}
